<% provide(:title, 'controller0') %>

<h1>Controller0#action0</h1>

  <p>Find me in app/views/controller0/action0.html.erb</p>
  <% @var0 == 0 or raise %>
  <% @var1 == 1 or raise %>

<h2>#CRUD</h2>

  <ul>
    <li><%= link_to 'New', {action: 'new'} %></li>
    <li><%= link_to 'Index', {action: 'index'} %></li>
    <li><%= link_to 'Show', {action: 'show', id: '1'} %></li>
    <li><%= link_to 'Edit', {action: 'edit', id: '1'} %></li>
  </ul>

<h2>#file upload</h2>

  <p><%= link_to 'File Upload', {action: 'file_upload'} %></p>

<h2>#params #routes #link_to</h2>

  <p>params = <%= params %></p>
  <p>Try this URL: <a href="?a=b&c=d&list[]=1&list[]=2&hash0[key0]=val0&hash0[key1]=val1">?a=b&c=d&index[]=1&index[]=2&hash0[key0]=val0&hash0[key1]=val1</a></p>

  <p>Routes and params:</p>

  <ul>
    <%#
        Dictionary parameters different from action become URL parameters:

        - `?id=XX` if the matching route does not contain `:id`
        - part of the url path if it does
    %>
    <li><%= link_to 'URL params', {action: 'url_params', id: '1'} %></li>
    <li><%= link_to 'URL params keyval', {action: 'url_params_keyval', id: '1'} %></li>

    <%#
        By default url parameters such as `:id` in routes match only alphanumeric characters.

        This route customized it to match only `/[abc]/`.
    %>
    <li><%= link_to 'URL params abc', {action: 'url_params_abc', id: 'abac'} %></li>

    <%# This would generate a routing error. %>
    <%#<li><%= link_to 'URL params abc fail', {action: 'url_params_abc', id: 'ada'} </li>%>

    <%# If action is not given it defaults to current action. %>
    <li><%= link_to 'Myself' %></li>

    <%# ##confirm %>
    <li><%= link_to 'Myself Confirm', {}, data: { confirm: "Are you sure?!?" } %></li>

    <%#
    #method

      link_to always generates anchors and HTML does not have out-of-the box method choice for anchors,
      however rails does support it by adding:

      - the standard attribute `rel="nofollow"` so that the link is not followed when clicked upon
      - the rails specifiec attribute `data-method="delete"`

      It works even without javascript.

      To get a plain HTML solution, use `button_to instead.
    %>
    <li><%= link_to 'file_download', {action: 'url_params_abc', id: 'abac'}, method: :delete %></li>
  </ul>

  <%#
  Contains request information such as the current action, controller, and GET/POST parameters.</p>
    Only the a=b form is standard for URLs key value parameteres.
    It is rails tht parses lists and hashes.
  %>

<h2>#request.env</h2>

  <%#
    The entire GCI info.
  %>

  <ul>
    <% request.env.each do |k, v| %>
      <li><%= k %> = <%= v %></li>
    <% end %>
  </ul>

<h2>#cookies</h2>

  <ul>
    <% cookies.each do |k, v| %>
      <li><%= k %> = <%= v %></li>
    <% end %>
  </ul>

<h2>#ajax</h2>

  <h3>manual ajax</h3>

    <script>
      var xmlhttp = new XMLHttpRequest()
      function ajax_handler() {
        if (xmlhttp.status == 200) {
          document.getElementById("ajax-target").innerHTML += '<li>xmlhttp.readyState = '
            + xmlhttp.readyState + ', time = ' + xmlhttp.responseText + '</li>';
        }
      }
      function ajax_send() {
        xmlhttp.open("GET", "controller0/ajax-test", true);
        xmlhttp.onreadystatechange = ajax_handler;
        xmlhttp.send();
      }
    </script>

    <p onclick="ajax_send()">Click me!</p>

    <ul id="ajax-target">
    </ul>

  <h3>rails helped ajax</h3>

    <p>TODO</p>

<h2>#Rails.env</h2>

  <%#
  Current environment: production, development, test, etc.
  %>

  <p>Rails.env = <%= Rails.env %></p>

  <p>Rails.root = <%= Rails.root %></p>

<h2>#button_to</h2>

  <%= button_to 'BROKEN New', @get, {action: 'new'} %>

<h2>#before_filter_do</h2>

<p>before_filter_do = <%= @before_filter_do %></p>

<h2>#flash</h2>

  <p><%= link_to 'Redirect to myself', {action: 'redirect_to_action0'} %>

  <p>notice now = <%= notice %></p>
  <p>alert now = <%= alert %></p>

  <%#
      Only certain standard flashes become local variables.

      For other flashes in general it is necessary to use the hash:
  %>
  <p>flash[:something] = <%= flash[:something] %></p>

<h2>#render #partials</h2>

  <%#
    Insert another template at current point.
    The template file gets an underline appended!
  %>

  <%= render "partial.html.erb" %>

<h2>#forms</h2>

  <p><%= text_field 'model0', 'string_col' %></p>
  <p><input id="model0_string_col" name="model0[string_col]" type="text" /></p>

  <%#= password_field_tag(:password) %>
  <%#= hidden_field_tag(:parent_id, "5") %>
  <%#= search_field(:user, :name) %>
  <%#= telephone_field(:user, :phone) %>
  <%#= date_field(:user, :born_on) %>
  <%#= datetime_field(:user, :meeting_time) %>
  <%#= datetime_local_field(:user, :graduation_day) %>
  <%#= month_field(:user, :birthday_month) %>
  <%#= week_field(:user, :birthday_week) %>
  <%#= url_field(:user, :homepage) %>
  <%#= email_field(:user, :address) %>
  <%#= color_field(:user, :favorite_color) %>
  <%#= time_field(:task, :started_at) %>
  <%#dropdown selection on one to many relation%>
  <%#= collection_select(:model0, :model1_id, @model1s, :id, :string_col) %>

<h2>#action mailer</h2>

  <p>For this to work, first configure your SMTP.</p>
  <%= form_tag action: 'mail' do %>
    <p><label for="user_address">Send emails to</label>:
    <%= email_field 'user', 'address' %></p>
    <%= submit_tag 'Send' %>
  <% end %>

<h2>#i18n</h2>

  <p><%= link_to 'en', {locale: 'en'} %> | <%= link_to 'zh', {locale: 'zh'} %></p>

  <p>I18n.locale = <%= I18n.locale %></p>

  <p>I18n.t :hello = <%= I18n.t :hello %></p>

  <%# t alias is available inside views. %>
  <p>t :hello = <%= t :hello %></p>

  <%# What happens when something is not translated. %>
  <p>I18n.t "Not translated!" = <%= I18n.t "Not translated!" %></p>

  <%# Use key as default if missing. %>
  <p>I18n.t :missing, default: "Not translated!" = <%= I18n.t :missing, default: "Not translated!" %></p>

  <%#
    Path where locale files will be searched for.
    Restart the server after adding new locale files.
  %>
  <p>I18n.load_path = <%= I18n.load_path %></p>

<h1>#third party</h1>

<h2>#devise #omniauth</h2>

  <% if user_signed_in? %>
    <p>current_user.email = <%= current_user.email %></p>
    <p><%= link_to 'Edit profile', edit_user_registration_path %> |
    <%= link_to "Logout", destroy_user_session_path, method: :destroy  %></p>
  <% else %>
    <p>Not logged in.</p>
    <p><%= link_to "Sign up", new_user_registration_path  %> |
    <%= link_to "Login", new_user_session_path %></p>
    <%= link_to "BROKEN Sign in with Facebook", user_omniauth_authorize_path(:facebook) %>
  <% end %>

<h2>#faker</h2>

  <ul>
    <li>name = <%= Faker::Name.name %></li>
    <li>email = <%= Faker::Internet.email %></li>
    <li>free_email = <%= Faker::Internet.free_email %></li>
    <li>user_name = <%= Faker::Internet.user_name %></li>
    <li>words = <%= Faker::Lorem.words(2) %></li>
    <li>paragraphs = <%= Faker::Lorem.paragraphs(2) %></li>
  </ul>
