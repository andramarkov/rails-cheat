<% provide(:title, 'controller0') %>

<p>Rails.env = <%= Rails.env %></p>

<%= h "Controller0#action0", 2 %>

  <p>Find me in app/views/controller0/action0.html.erb</p>

<%= h "#CRUD", 2 %>

  <ul>
    <li><%= link_to 'New', {action: 'new'} %></li>
    <li><%= link_to 'Index', {action: 'index'} %></li>
    <li><%= link_to 'Show', {action: 'show', id: '1'} %></li>
    <li><%= link_to 'Edit', {action: 'edit', id: '1'} %></li>
  </ul>

<%= h "#accessible variables and methods", 2 %>

  <% @var0 == 0 or raise %>
  <% @var1 == 1 or raise %>
  <% not defined? @after_render or raise %>
  <% @arr[0] += 1 %>

  <%= h "#named helpers", 2 %>
    <ul>
      <li>root_url = <%= root_url %></li>
      <li>root_path = <%= root_path %></li>
      <li>namespace0_root_path = <%= namespace0_root_path %></li>
      <li>namespace0_action0_path = <%= namespace0_action0_path %></li>
      <li>action0_path = <%= action0_path %></li>
      <li>action1_path = <%= action1_path %></li>

      <%#TODO%>
      <%#<li>model0_path(@model0s.first) = <%= model0_path(@model0s.first) </li>%>
    </ul>

<%= h "#file upload", 2 %>

  <p><%= link_to 'File Upload', {action: 'file_upload'} %></p>

<%= h "#routes #link_to", 2 %>

  <p>Routes and params:</p>

  <ul>
    <li>link_to "inner", "href" = <%= link_to "inner", "href" %></li>
    <li>
      same as above do end version =
      <%= link_to "href" do %>
        inner
      <% end %>
    </li>

    <li><%= link_to "Site Root", root_path %></li>

    <%#
        Controller is by default the current controller. One can be given via the `controller:` param.
    %>
    <li><%= link_to "Another Controller", { controller: 'users', action: 'index' } %></li>

    <li><%= link_to "Another Namespace", { controller: 'namespace0/controller0', action: 'action0' } %></li>
    <li><%= link_to "Another Namespace Root", namespace0_root_path %></li>

    <%#
        Dictionary parameters different from action become URL parameters

        - `?id=XX` if the matching route does not contain `:id`
        - part of the url path if it does
    %>
    <li><%= link_to 'URL params', {action: 'url_params', id: '1'} %></li>
    <li><%= link_to 'URL params keyval', {action: 'url_params_keyval', id: '1'} %></li>

    <%#
        By default url parameters such as `:id` in routes match only alphanumeric characters.

        This route customized it to match only `/[abc]/`.
    %>
    <li><%= link_to 'URL params abc', {action: 'url_params_abc', id: 'abac'} %></li>

    <%# This would generate a routing error. %>
    <%#<li><%= link_to 'URL params abc fail', {action: 'url_params_abc', id: 'ada'} </li>%>

    <%# If action is not given it defaults to current action. %>
    <li><%= link_to 'Myself' %></li>

    <li>
    <%= link_to '#data', {}, data:{a: "0", b: "1", c_0: "2"} %>: adds `data-` HTML5 data attributes to link.
      Some of the values seem to already have Rails specific meanings, for example `confirm`, `remote`. TODO which exactly?
    </li>

    <%# ##confirm %>
    <li><%= link_to 'Myself Confirm', {}, data: { confirm: "Are you sure?!?" } %></li>

    <%#
    #method

      link_to always generates anchors and HTML does not have out-of-the box method choice for anchors,
      however rails does support it by adding:

      - the standard attribute `rel="nofollow"` so that the link is not followed when clicked upon
      - the rails specifiec attribute `data-method="delete"`

      It works even without javascript.

      To get a plain HTML solution, use `button_to instead.
    %>
    <li><%= link_to 'file_download', {action: 'url_params_abc', id: 'abac'}, method: :delete %></li>

    <li>
      <%= link_to '#remote: true', {}, remote: true %>: Adds `data-remote="true"` to the tag.
      This is in turn used by the Rails default Javascript library to make clicks on that link trigger
      AJAX queries instead of regular redirects. Those can be handled in controllers via `respond_to`.
    </li>
  </ul>

  <%#
  Contains request information such as the current action, controller, and GET/POST parameters.</p>
    Only the a=b form is standard for URLs key value parameteres.
    It is rails tht parses lists and hashes.
  %>

<%= h "#params", 2 %>

  <p>Hash like object of type: ##HashWithIndifferentAccess.</p>
  <%
    h = ActiveSupport::HashWithIndifferentAccess.new(:a => 1, "b" => 2)
    h[:a] == 1 or raise
    h[:b] == 2 or raise
    h["a"] == 1 or raise
    h["b"] == 2 or raise
    # By default, string keys:
    h.keys.sort == ["a", "b"] or raise
    # Rails mokey patches Hash with symbolize keys:
    h.symbolize_keys == {a:1, b:2} or raise
  %>
  <p>params = <%= params %></p>
  <p>Try this URL: <a href="?a=b&c=d&list[]=1&list[]=2&hash0[key0]=val0&hash0[key1]=val1">?a=b&c=d&index[]=1&index[]=2&hash0[key0]=val0&hash0[key1]=val1</a></p>
  <pre>
    All param values passed from GET/POST params are strings.
    Conversion to other types must be done manually
    Discussion on booleans: http://stackoverflow.com/questions/3673607/how-do-i-submit-a-boolean-parameter-in-rails
    The most common convention is to use "true" and "false".
  </pre>


<%= h "#request", 2 %>

  <p>original_url = <%= request.original_url %></p>
  <p>url =          <%= request.url %></p>
  <p>host =         <%= request.host %></p>
  <%# takes as arguments the number of domains to consider. Default: 2 %>
  <p>domain =       <%= request.domain %></p>
  <p>format =       <%= request.format %></p>
  <p>method =       <%= request.method %></p>
  <p>headers =      <%= request.headers %></p>
  <p>port =         <%= request.port %></p>
  <p>protocol =     <%= request.protocol %></p>
  <p>query_string = <%= request.query_string %></p>
  <%# IP that made the request %>
  <p>remote_ip =    <%= request.remote_ip %></p>
  <p>path_parameters =    <%= request.path_parameters %></p>
  <p>query_parameters =    <%= request.query_parameters %></p>
  <%# post body related: %>
  <p>request_parameters =    <%= request.request_parameters %></p>

  <p>request.env = </p>
  <ul>
    <% request.env.each do |k, v| %>
      <li><%= k %> = <%= v %></li>
    <% end %>
  </ul>

<%= h "#response", 2 %>

  <table>
    <tr><td>status</td><td><%= response.status %></td><tr>
    <%# where the user will be redirected to %>
    <tr><td>location</td><td><%= response.location %></td><tr>
    <tr><td>content_type</td><td><%= response.content_type %></td><tr>
    <tr><td>charset</td><td><%= response.charset %></td><tr>
    <tr><td>headers</td><td><%= response.headers %></td><tr>
    <tr><td>body</td><td><%= response.body %></td><tr>
  </table>

<%= h "#cookies", 2 %>

  <ul>
    <% cookies.each do |k, v| %>
      <li><%= k %> = <%= v %></li>
    <% end %>
  </ul>

<%= h "#ajax", 2 %>

  <%= h "manual ajax", 3 %>

    <script>
      var xmlhttp = new XMLHttpRequest()
      function ajax_handler() {
        if (xmlhttp.status == 200) {
          document.getElementById("ajax-target").innerHTML += '<li>xmlhttp.readyState = '
            + xmlhttp.readyState + ', time = ' + xmlhttp.responseText + '</li>';
        }
      }
      function ajax_send() {
        xmlhttp.open("GET", "controller0/ajax-test", true);
        xmlhttp.onreadystatechange = ajax_handler;
        xmlhttp.send();
      }
    </script>

    <p onclick="ajax_send()">Click me!</p>

    <ul id="ajax-target">
    </ul>

  <%= h "rails helped ajax", 3 %>

    <p>TODO</p>

<%= h "#Rails", 2 %>

  <%#
  Current environment: production, development, test, etc.
  %>

  <p>Rails.env = <%= Rails.env %></p>
  <p>Rails.root = <%= Rails.root %></p>
  <p>Rails.logger.level = <%= Rails.logger.level %></p>

<%= h "#button_to", 2 %>

  <%= button_to 'TODO New', @get, {action: 'new'} %>

<%= h "#tag", 2 %>

  <%= tag 'p' %>

<%= h "#flash", 2 %>

  <p><%= link_to 'Redirect to myself', {action: 'redirect_to_action0'} %>

  <p>notice now = <%= notice %></p>
  <p>alert now = <%= alert %></p>

  <%#
      Only certain standard flashes become local variables.

      For other flashes in general it is necessary to use the hash:
  %>
  <p>flash[:something] = <%= flash[:something] %></p>

<%= h "#render #partials", 2 %>

  <%#
    Insert another template at current point.
    The template file gets an underline appended!
  %>

    <%= render "partial.html.erb" %>

  <%#
    Insane shorthand method:
    <http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials>

    Will render template `_model_object` and pass object `@model_object` to it.
  %>

    <%# render @model_object %>

<%= h "##form", 2 %>

  <%= h "##form_tag", 2 %>

    <p>Lower level method than `form_for, which is much more commonly used when the form relates to an object.</p>

  <p>input: <%= text_field 'model0', 'string_col' %></p>
  <p>expected: <input id="model0_string_col" name="model0[string_col]" type="text"/></p>

  <%#= password_field_tag(:password) %>
  <%#= hidden_field_tag(:parent_id, "5") %>
  <%#= search_field(:user, :name) %>
  <%#= telephone_field(:user, :phone) %>
  <%#= date_field(:user, :born_on) %>
  <%#= datetime_field(:user, :meeting_time) %>
  <%#= datetime_local_field(:user, :graduation_day) %>
  <%#= month_field(:user, :birthday_month) %>
  <%#= week_field(:user, :birthday_week) %>
  <%#= url_field(:user, :homepage) %>
  <%#= email_field(:user, :address) %>
  <%#= color_field(:user, :favorite_color) %>
  <%#= time_field(:task, :started_at) %>
  <%# dropdown selection on one to many relation: %>
  <%#= collection_select(:model0, :model1_id, @model1s, :id, :string_col) %>

<%= h "#action mailer #email #mail", 2 %>

  <p>On development, uses letter opener plugin which should open any sent emails on your browser.</p>
  <p>On production, send actual emails via SMTP. You must first configure your SMTP.</p>
  <%= form_tag action: 'mail' do %>
    <p>
      <%= label :user, :address, "Send emails to" %>:
      <%= email_field 'user', 'address' %>
    </p>
    <%= submit_tag 'Send' %>
  <% end %>

<%= h "#i18n", 2 %>

  <p><%= link_to 'en', {locale: 'en'} %> | <%= link_to 'zh', {locale: 'zh'} %></p>

  <p>I18n.locale = <%= I18n.locale %></p>

  <p>I18n.t :hello = <%= I18n.t :hello %></p>

  <%# t alias is available inside views. %>
  <p>t :hello = <%= t :hello %></p>

  <%#
      At Rails 4.0, when something is not translated an exception is raised and trash apears on the screen.

      It is however possible to modify the exception handler to not print trash and print the exact input string instead
      as shown here

      <http://guides.rubyonrails.org/i18n.html#using-different-exception-handlers>

      Put that code into an initializer.
  %>
  <p>t "Not translated!" = <%= t "Not translated!" %></p>

  <%# Use key as default if missing. %>
  <p>t :missing, default: "Not translated!" = <%= t :missing, default: "Not translated!" %></p>

  <%#
    Path where locale files will be searched for.
    Restart the server after adding new locale files.
  %>
  <p>I18n.load_path = <%= I18n.load_path %></p>

<%= h "#images", 2 %>

  <p>
    Relative paths give URLs of type <code>/assets/relpath.png</code> on development,
    and <code>/assets/relpath-MD5.png</code> on production:
    <%= image_tag "png.png", alt: "alt", size: "20x30" %>
  </p>

  <p>
    Absolute paths such as `/app/assets/images/png.png` create images with that exact path.
    **Never** use this: in production the assets are precompiled under `public/assets`,
    and not visible under app /images.
    <%# image_tag "/images/png.png", alt: "alt", size: "20x30" %>.
  </p>

<%= h "#assets", 2 %>

  <div class="application-css">application-css</div>
  <div class="controller0-scss">controller0-css</div>

<%= h "#third party" %>

  <p><%= link_to "Haml", {action: :haml} %></p>

<%= h "#custom helpers", 2 %>

<%#= toc %>
<%= h "header 1" %>
<%= h "header 2", 2 %>

<%= h "#users #devise #omniauth", 2 %>

  <p><%= link_to "Users Index", { controller: 'users', action: 'index' } %></p>
  <% if user_signed_in? %>
    <p>current_user.email = <%= current_user.email %></p>
    <p><%= link_to 'Edit profile', edit_user_registration_path %> |
    <%= link_to "Logout", destroy_user_session_path, method: :delete %></p>
  <% else %>
    <p>Not logged in.</p>
    <p>
      <%= link_to "Login", new_user_session_path %> |
      <%= link_to "Sign up", new_user_registration_path %>
    </p>
    <%= link_to "TODO Sign in with Facebook", user_omniauth_authorize_path(:facebook) %>
  <% end %>

<%= h "#breadcrumbs_on_rails", 2 %>

  <p>TODO</p>

  <%= render_breadcrumbs %>

<% if Rails.env == 'development' || Rails.env == 'test' %>
  <%= h "#faker", 2 %>
    <ul>
      <li>name = <%= Faker::Name.name %></li>
      <li>email = <%= Faker::Internet.email %></li>
      <li>free_email = <%= Faker::Internet.free_email %></li>
      <li>user_name = <%= Faker::Internet.user_name %></li>
      <li>words = <%= Faker::Lorem.words(2) %></li>
      <li>paragraphs = <%= Faker::Lorem.paragraphs(2) %></li>
    </ul>
<% end %>
