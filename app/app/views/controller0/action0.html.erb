<% provide(:title, 'controller0') %>

<%= h "Controller0#action0", 2 %>

  <p>Find me in app/views/controller0/action0.html.erb</p>

<%= h "#CRUD", 2 %>

  <ul>
    <li><%= link_to 'New', {action: 'new'} %></li>
    <li><%= link_to 'Index', {action: 'index'} %></li>
    <li><%= link_to 'Show', {action: 'show', id: '1'} %></li>
    <li><%= link_to 'Edit', {action: 'edit', id: '1'} %></li>
  </ul>

<%= h "#accessible variables and methods", 2 %>

  <% @var0 == 0 or raise %>
  <% @var1 == 1 or raise %>
  <% not defined? @after_render or raise %>
  <% @arr[0] += 1 %>

  <%= h "#named helpers", 2 %>
    <ul>
      <li>root_url = <%= root_url %></li>
      <li>root_path = <%= root_path %></li>
      <li>namespace0_root_path = <%= namespace0_root_path %></li>
      <li>namespace0_action0_path = <%= namespace0_action0_path %></li>
      <li>action0_path = <%= action0_path %></li>
      <li>action1_path = <%= action1_path %></li>

      <%#TODO%>
      <%#<li>model0_path(@model0s.first) = <%= model0_path(@model0s.first) </li>%>
    </ul>

<%= h "#file upload", 2 %>

  <p><%= link_to 'File Upload', {action: 'file_upload'} %></p>

<%= h "#params #routes #link_to", 2 %>

  <p>params = <%= params %></p>
  <p>Try this URL: <a href="?a=b&c=d&list[]=1&list[]=2&hash0[key0]=val0&hash0[key1]=val1">?a=b&c=d&index[]=1&index[]=2&hash0[key0]=val0&hash0[key1]=val1</a></p>

  <p>Routes and params:</p>

  <ul>
    <li>link_to "inner", "href" = <%= link_to "inner", "href" %></li>
    <li>
      same as above do end version =
      <%= link_to "href" do %>
        inner
      <% end %>
    </li>

    <li><%= link_to "Site Root", root_path %></li>

    <%#
        Controller is by default the current controller. One can be given via the `controller:` param.
    %>
    <li><%= link_to "Another Controller", { controller: 'users', action: 'index' } %></li>

    <li><%= link_to "Another Namespace", { controller: 'namespace0/controller0', action: 'action0' } %></li>
    <li><%= link_to "Another Namespace Root", namespace0_root_path %></li>

    <%#
        Dictionary parameters different from action become URL parameters

        - `?id=XX` if the matching route does not contain `:id`
        - part of the url path if it does
    %>
    <li><%= link_to 'URL params', {action: 'url_params', id: '1'} %></li>
    <li><%= link_to 'URL params keyval', {action: 'url_params_keyval', id: '1'} %></li>

    <%#
        By default url parameters such as `:id` in routes match only alphanumeric characters.

        This route customized it to match only `/[abc]/`.
    %>
    <li><%= link_to 'URL params abc', {action: 'url_params_abc', id: 'abac'} %></li>

    <%# This would generate a routing error. %>
    <%#<li><%= link_to 'URL params abc fail', {action: 'url_params_abc', id: 'ada'} </li>%>

    <%# If action is not given it defaults to current action. %>
    <li><%= link_to 'Myself' %></li>

    <%# ##confirm %>
    <li><%= link_to 'Myself Confirm', {}, data: { confirm: "Are you sure?!?" } %></li>

    <%#
    #method

      link_to always generates anchors and HTML does not have out-of-the box method choice for anchors,
      however rails does support it by adding:

      - the standard attribute `rel="nofollow"` so that the link is not followed when clicked upon
      - the rails specifiec attribute `data-method="delete"`

      It works even without javascript.

      To get a plain HTML solution, use `button_to instead.
    %>
    <li><%= link_to 'file_download', {action: 'url_params_abc', id: 'abac'}, method: :delete %></li>
  </ul>

  <%#
  Contains request information such as the current action, controller, and GET/POST parameters.</p>
    Only the a=b form is standard for URLs key value parameteres.
    It is rails tht parses lists and hashes.
  %>

<%= h "#request", 2 %>

  <p>original_url = <%= request.original_url %></p>
  <p>url =          <%= request.url %></p>
  <p>host =         <%= request.host %></p>
  <%# takes as arguments the number of domains to consider. Default: 2 %>
  <p>domain =       <%= request.domain %></p>
  <p>format =       <%= request.format %></p>
  <p>method =       <%= request.method %></p>
  <p>headers =      <%= request.headers %></p>
  <p>port =         <%= request.port %></p>
  <p>protocol =     <%= request.protocol %></p>
  <p>query_string = <%= request.query_string %></p>
  <%# IP that made the request %>
  <p>remote_ip =    <%= request.remote_ip %></p>
  <p>path_parameters =    <%= request.path_parameters %></p>
  <p>query_parameters =    <%= request.query_parameters %></p>
  <%# post body related: %>
  <p>request_parameters =    <%= request.request_parameters %></p>

  <p>request.env = </p>
  <ul>
    <% request.env.each do |k, v| %>
      <li><%= k %> = <%= v %></li>
    <% end %>
  </ul>

<%= h "#response", 2 %>

  <table>
    <tr><td>status</td><td><%= response.status %></td><tr>
    <%# where the user will be redirected to %>
    <tr><td>location</td><td><%= response.location %></td><tr>
    <tr><td>content_type</td><td><%= response.content_type %></td><tr>
    <tr><td>charset</td><td><%= response.charset %></td><tr>
    <tr><td>headers</td><td><%= response.headers %></td><tr>
    <tr><td>body</td><td><%= response.body %></td><tr>
  </table>

<%= h "#cookies", 2 %>

  <ul>
    <% cookies.each do |k, v| %>
      <li><%= k %> = <%= v %></li>
    <% end %>
  </ul>

<%= h "#ajax", 2 %>

  <%= h "manual ajax", 3 %>

    <script>
      var xmlhttp = new XMLHttpRequest()
      function ajax_handler() {
        if (xmlhttp.status == 200) {
          document.getElementById("ajax-target").innerHTML += '<li>xmlhttp.readyState = '
            + xmlhttp.readyState + ', time = ' + xmlhttp.responseText + '</li>';
        }
      }
      function ajax_send() {
        xmlhttp.open("GET", "controller0/ajax-test", true);
        xmlhttp.onreadystatechange = ajax_handler;
        xmlhttp.send();
      }
    </script>

    <p onclick="ajax_send()">Click me!</p>

    <ul id="ajax-target">
    </ul>

  <%= h "rails helped ajax", 3 %>

    <p>TODO</p>

<%= h "#Rails", 2 %>

  <%#
  Current environment: production, development, test, etc.
  %>

  <p>Rails.env = <%= Rails.env %></p>

  <p>Rails.root = <%= Rails.root %></p>

  <p>Rails.logger.level = <%= Rails.logger.level %></p>

<%= h "#button_to", 2 %>

  <%= button_to 'TODO New', @get, {action: 'new'} %>

<%= h "#tag", 2 %>

  <%= tag 'p' %>

<%= h "#flash", 2 %>

  <p><%= link_to 'Redirect to myself', {action: 'redirect_to_action0'} %>

  <p>notice now = <%= notice %></p>
  <p>alert now = <%= alert %></p>

  <%#
      Only certain standard flashes become local variables.

      For other flashes in general it is necessary to use the hash:
  %>
  <p>flash[:something] = <%= flash[:something] %></p>

<%= h "#render #partials", 2 %>

  <%#
    Insert another template at current point.
    The template file gets an underline appended!
  %>

  <%= render "partial.html.erb" %>

<%= h "#form", 2 %>

  <p><%= text_field 'model0', 'string_col' %></p>
  <p><input id="model0_string_col" name="model0[string_col]" type="text" /></p>

  <%#= password_field_tag(:password) %>
  <%#= hidden_field_tag(:parent_id, "5") %>
  <%#= search_field(:user, :name) %>
  <%#= telephone_field(:user, :phone) %>
  <%#= date_field(:user, :born_on) %>
  <%#= datetime_field(:user, :meeting_time) %>
  <%#= datetime_local_field(:user, :graduation_day) %>
  <%#= month_field(:user, :birthday_month) %>
  <%#= week_field(:user, :birthday_week) %>
  <%#= url_field(:user, :homepage) %>
  <%#= email_field(:user, :address) %>
  <%#= color_field(:user, :favorite_color) %>
  <%#= time_field(:task, :started_at) %>
  <%# dropdown selection on one to many relation: %>
  <%#= collection_select(:model0, :model1_id, @model1s, :id, :string_col) %>

<%= h "#action mailer #email #mail", 2 %>

  <p>For this to work, first configure your SMTP.</p>
  <%= form_tag action: 'mail' do %>
    <p>
      <%= label :user, :address, "Send emails to" %>:
      <%= email_field 'user', 'address' %>
    </p>
    <%= submit_tag 'Send' %>
  <% end %>

<%= h "#i18n", 2 %>

  <p><%= link_to 'en', {locale: 'en'} %> | <%= link_to 'zh', {locale: 'zh'} %></p>

  <p>I18n.locale = <%= I18n.locale %></p>

  <p>I18n.t :hello = <%= I18n.t :hello %></p>

  <%# t alias is available inside views. %>
  <p>t :hello = <%= t :hello %></p>

  <%#
      At Rails 4.0, when something is not translated an exception is raised and trash apears on the screen.

      It is however possible to modify the exception handler to not print trash and print the exact input string instead
      as shown here

      <http://guides.rubyonrails.org/i18n.html#using-different-exception-handlers>

      Put that code into an initializer.
  %>
  <p>t "Not translated!" = <%= t "Not translated!" %></p>

  <%# Use key as default if missing. %>
  <p>t :missing, default: "Not translated!" = <%= t :missing, default: "Not translated!" %></p>

  <%#
    Path where locale files will be searched for.
    Restart the server after adding new locale files.
  %>
  <p>I18n.load_path = <%= I18n.load_path %></p>

<%= h "#images", 2 %>

  <p>
    Relative paths give URLs of type <code>/assets/relpath.png</code> on development,
    and <code>/assets/relpath-MD5.png</code> on production:
    <%= image_tag "png.png", alt: "alt", size: "20x30" %>
  </p>

  <p>
    Absolute paths create images with that exact path:
    <%= image_tag "/images/png.png", alt: "alt", size: "20x30" %>.

    Never use this since images should be served through the assets pipeline.
  </p>

<%= h "#assets", 2 %>

  <div class="controller0-scss">scss</div>

<%= h "#third party" %>

  <p><%= link_to "Haml", {action: :haml} %></p>

<%= h "#custom helpers", 2 %>

<%#= toc %>
<%= h "header 1" %>
<%= h "header 2", 2 %>

<%= h "#users #devise #omniauth", 2 %>

  <p><%= link_to "Users Index", { controller: 'users', action: 'index' } %></p>
  <% if user_signed_in? %>
    <p>current_user.email = <%= current_user.email %></p>
    <p><%= link_to 'Edit profile', edit_user_registration_path %> |
    <%= link_to "Logout", destroy_user_session_path, method: :delete %></p>
  <% else %>
    <p>Not logged in.</p>
    <p>
      <%= link_to "Login", new_user_session_path %> |
      <%= link_to "Sign up", new_user_registration_path %>
    </p>
    <%= link_to "TODO Sign in with Facebook", user_omniauth_authorize_path(:facebook) %>
  <% end %>

<%= h "#faker", 2 %>

  <ul>
    <li>name = <%= Faker::Name.name %></li>
    <li>email = <%= Faker::Internet.email %></li>
    <li>free_email = <%= Faker::Internet.free_email %></li>
    <li>user_name = <%= Faker::Internet.user_name %></li>
    <li>words = <%= Faker::Lorem.words(2) %></li>
    <li>paragraphs = <%= Faker::Lorem.paragraphs(2) %></li>
  </ul>

<%= h "#breadcrumbs_on_rails", 2 %>

  <p>TODO</p>

  <%= render_breadcrumbs %>
